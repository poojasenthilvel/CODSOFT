#include <iostream>
#include <limits> // For clearing input buffer
using namespace std;

void printBoard(char board[3][3]) {
    cout << "-------------\n";
    for (int i = 0; i < 3; ++i) {
        cout << "| ";
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j] << " | ";
        }
        cout << endl;
        cout << "-------------\n";
    }
}

bool checkWin(char board[3][3], char player) {
    // Check rows, columns, and diagonals
    for (int i = 0; i < 3; ++i) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) return true;
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player) return true;
    }
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) return true;
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) return true;
    return false;
}

bool checkDraw(char board[3][3]) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] == ' ') return false;
        }
    }
    return true;
}

void resetBoard(char board[3][3]) {
    // Initialize the board with empty spaces
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            board[i][j] = ' ';
}

void playGame() {
    char board[3][3];
    resetBoard(board);  // Reset board for a new game
    char currentPlayer = 'X';
    int row, col;
    bool gameOver = false;

    // Automatically place the first "X" in the top-right corner
    board[0][2] = 'X'; // Row 0, Column 2 (top-right corner)
    currentPlayer = 'O'; // Switch to "O" after the initial move

    while (!gameOver) {
        printBoard(board);
        cout << "Player " << currentPlayer << ", enter your move (row and column): ";
        cin >> row >> col;

        // Validate input
        if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row][col] != ' ') {
            cout << "Invalid move, try again. 😞\n";
            continue;
        }

        // Update board
        board[row][col] = currentPlayer;

        // Check if the current player wins
        if (checkWin(board, currentPlayer)) {
            printBoard(board);
            cout << "Player " << currentPlayer << " wins! 🎉🏆\n";
            gameOver = true;
        }
        // Check for a draw
        else if (checkDraw(board)) {
            printBoard(board);
            cout << "It's a draw! 😕\n";
            gameOver = true;
        }
        else {
            // Switch players
            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
        }
    }
}

int main() {
    bool playAgain = true;
    
    while (playAgain) {
        playGame();  // Start the game

        // Ask if players want to play again
        char playResponse;
        cout << "Do you want to play again? (Y/N): ";
        cin >> playResponse;

        // Clear any leftover characters in the input buffer
        cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Clears the buffer

        // Check the player's response
        if (playResponse == 'N' || playResponse == 'n') {
            playAgain = false;
            cout << "Thanks for playing! 👋😄\n";
        } else if (playResponse != 'Y' && playResponse != 'y') {
            // If the input is not 'Y' or 'N', prompt again
            cout << "Invalid input. Please enter Y or N. 😅\n";
        }
    }

    return 0;
}
